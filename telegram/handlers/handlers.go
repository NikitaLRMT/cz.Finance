package handlers

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"cz.Finance/backend/models"
	"cz.Finance/telegram/client"
	"cz.Finance/telegram/parsers"
	"gopkg.in/telebot.v3"
)

// BotHandlers —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
type BotHandlers struct {
	apiClient *client.APIClient
}

// NewBotHandlers —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞
func NewBotHandlers(apiClient *client.APIClient) *BotHandlers {
	return &BotHandlers{
		apiClient: apiClient,
	}
}

// RegisterHandlers —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
func (h *BotHandlers) RegisterHandlers(bot *telebot.Bot) {
	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
	bot.Handle("/start", h.HandleStart)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /link
	bot.Handle("/link", h.HandleLink)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unlink
	bot.Handle("/unlink", h.HandleUnlink)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /expense
	bot.Handle("/expense", h.HandleExpenseCommand)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /income
	bot.Handle("/income", h.HandleIncomeCommand)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance
	bot.Handle("/balance", h.HandleBalance)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /transactions
	bot.Handle("/transactions", h.HandleTransactions)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /category
	bot.Handle("/category", h.HandleCategory)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—é–¥–∂–µ—Ç–Ω—ã—Ö —Ü–µ–ª–µ–π
	bot.Handle("/budget", h.HandleBudgetGoals)
	bot.Handle("/setbudget", h.HandleSetBudgetGoal)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç—ã
	bot.Handle(telebot.OnText, h.HandleMessage)
}

// HandleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (h *BotHandlers) HandleStart(c telebot.Context) error {
	welcomeMessage := `
–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/link - –°–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
/unlink - –û—Ç–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
/expense - –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É
/income - –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ
/balance - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å
/transactions - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
/category - –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
/budget - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—é–¥–∂–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏
/setbudget - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç–Ω—É—é —Ü–µ–ª—å

–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
/link email@example.com password
`
	return c.Send(welcomeMessage)
}

// HandleLink –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /link –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
func (h *BotHandlers) HandleLink(c telebot.Context) error {
	args := c.Args()
	if len(args) != 2 {
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /link email –ø–∞—Ä–æ–ª—å")
	}

	email := args[0]
	password := args[1]

	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
	request := &models.TelegramLinkRequest{
		Email:    email,
		Password: password,
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram
	telegramID := c.Sender().ID
	username := c.Sender().Username
	firstName := c.Sender().FirstName
	lastName := c.Sender().LastName

	// –°–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã —á–µ—Ä–µ–∑ API
	user, err := h.apiClient.LinkTelegramAccount(telegramID, username, firstName, lastName, request)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: %s", err.Error()))
	}

	return c.Send(fmt.Sprintf("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s", user.Username))
}

// HandleUnlink –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /unlink –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
func (h *BotHandlers) HandleUnlink(c telebot.Context) error {
	telegramID := c.Sender().ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
	_, err := h.apiClient.GetUserByTelegramID(telegramID)
	if err != nil {
		return c.Send("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")
	}

	// –û—Ç–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
	err = h.apiClient.UnlinkAccount(telegramID)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: %s", err.Error()))
	}

	return c.Send("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")
}

// HandleExpenseCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /expense
func (h *BotHandlers) HandleExpenseCommand(c telebot.Context) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
	_, err := h.apiClient.GetUserByTelegramID(c.Sender().ID)
	if err != nil {
		return c.Send("–í—ã –Ω–µ —Å–≤—è–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link")
	}

	expenseTemplate := `
–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –°—É–º–º–∞ [–û–ø–∏—Å–∞–Ω–∏–µ]

–ù–∞–ø—Ä–∏–º–µ—Ä:
–ü—Ä–æ–¥—É–∫—Ç—ã –ü—è—Ç–µ—Ä–æ—á–∫–∞ 1300 –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∑–∞–∫—É–ø–∫–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
- –ü—Ä–æ–¥—É–∫—Ç—ã
- –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
- –ñ–∏–ª—å—ë
- –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ
- –ü–æ–∫—É–ø–∫–∏
- –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
- –ó–¥–æ—Ä–æ–≤—å–µ
- –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
- –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
- –î—Ä—É–≥–æ–µ
`
	return c.Send(expenseTemplate)
}

// HandleIncomeCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /income
func (h *BotHandlers) HandleIncomeCommand(c telebot.Context) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
	_, err := h.apiClient.GetUserByTelegramID(c.Sender().ID)
	if err != nil {
		return c.Send("–í—ã –Ω–µ —Å–≤—è–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link")
	}

	incomeTemplate := `
–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ò—Å—Ç–æ—á–Ω–∏–∫ –°—É–º–º–∞ [–û–ø–∏—Å–∞–Ω–∏–µ]

–ù–∞–ø—Ä–∏–º–µ—Ä:
–ó–∞—Ä–ø–ª–∞—Ç–∞ 50000 –ê–≤–∞–Ω—Å

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:
- –ó–∞—Ä–ø–ª–∞—Ç–∞
- –§—Ä–∏–ª–∞–Ω—Å
- –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
- –ü–æ–¥–∞—Ä–æ–∫
- –ê—Ä–µ–Ω–¥–∞
- –î—Ä—É–≥–æ–µ
`
	return c.Send(incomeTemplate)
}

// HandleBalance –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /balance
func (h *BotHandlers) HandleBalance(c telebot.Context) error {
	telegramID := c.Sender().ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
	user, err := h.apiClient.GetUserByTelegramID(telegramID)
	if err != nil {
		return c.Send("–í—ã –Ω–µ —Å–≤—è–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
	now := time.Now()
	year, month, _ := now.Date()

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü —á–µ—Ä–µ–∑ API
	stats, err := h.apiClient.GetMonthlyStats(user.ID, year, int(month), telegramID)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: %s", err.Error()))
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	summary := stats["summary"].(map[string]interface{})
	balance := summary["balance"].(float64)
	expenses := summary["expenses"].(float64)
	incomes := summary["incomes"].(float64)

	balanceMessage := fmt.Sprintf(`
–í–∞—à –±–∞–ª–∞–Ω—Å:

üóì –ü–µ—Ä–∏–æ–¥: %s %d

üí∞ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: %.2f —Ä—É–±.
üí∏ –†–∞—Å—Ö–æ–¥—ã: %.2f —Ä—É–±.
üìä –ë–∞–ª–∞–Ω—Å: %.2f —Ä—É–±.
`, now.Month().String(), year, incomes, expenses, balance)

	return c.Send(balanceMessage)
}

// HandleTransactions –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /transactions
func (h *BotHandlers) HandleTransactions(c telebot.Context) error {
	telegramID := c.Sender().ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
	user, err := h.apiClient.GetUserByTelegramID(telegramID)
	if err != nil {
		return c.Send("–í—ã –Ω–µ —Å–≤—è–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link")
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ API
	transactions, err := h.apiClient.GetRecentTransactions(5, telegramID)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: %s", err.Error()))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
	fmt.Printf("–ü–æ–ª—É—á–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %+v\n", transactions)

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := fmt.Sprintf("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è %s:\n\n", user.Username)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
	hasTransactions := false

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
	if recentExpenses, ok := transactions["recent_expenses"]; ok {
		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏–∑ –ø–æ–ª—è recent_expenses
		hasTransactions = handleExpenses(recentExpenses, &message)
	} else if expenses, ok := transactions["expenses"]; ok {
		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏–∑ –ø–æ–ª—è expenses
		hasTransactions = handleExpenses(expenses, &message)
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Ö–æ–¥–æ–≤
	if recentIncomes, ok := transactions["recent_incomes"]; ok {
		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Ö–æ–¥—ã –∏–∑ –ø–æ–ª—è recent_incomes
		hasTransactions = handleIncomes(recentIncomes, &message) || hasTransactions
	} else if incomes, ok := transactions["incomes"]; ok {
		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Ö–æ–¥—ã –∏–∑ –ø–æ–ª—è incomes
		hasTransactions = handleIncomes(incomes, &message) || hasTransactions
	}

	if !hasTransactions {
		message += "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
	}

	return c.Send(message)
}

// handleExpenses –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
func handleExpenses(expenses interface{}, message *string) bool {
	fmt.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: %+v\n", expenses)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å—Ö–æ–¥—ã
	switch expList := expenses.(type) {
	case []interface{}:
		if len(expList) == 0 {
			return false
		}
		*message += "üí∏ –†–∞—Å—Ö–æ–¥—ã:\n"
		for i, exp := range expList {
			if i >= 5 {
				break
			}

			// –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ
			var date, title, category string
			var amount float64

			switch expense := exp.(type) {
			case map[string]interface{}:
				// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ map
				if dateVal, ok := expense["date"]; ok {
					date = fmt.Sprintf("%v", dateVal)
				} else if dateVal, ok := expense["created_at"]; ok {
					date = fmt.Sprintf("%v", dateVal)
				}

				if titleVal, ok := expense["title"]; ok {
					title = fmt.Sprintf("%v", titleVal)
				}

				if categoryVal, ok := expense["category"]; ok {
					category = fmt.Sprintf("%v", categoryVal)
				}

				if amountVal, ok := expense["amount"]; ok {
					switch a := amountVal.(type) {
					case float64:
						amount = a
					case int:
						amount = float64(a)
					case string:
						amount, _ = strconv.ParseFloat(a, 64)
					}
				}
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
			if date != "" {
				if len(date) > 10 {
					date = date[:10]
				}
				*message += fmt.Sprintf("- %s | %s | %s | %.2f —Ä—É–±.\n", date, category, title, amount)
			} else {
				*message += fmt.Sprintf("- %s | %s | %.2f —Ä—É–±.\n", category, title, amount)
			}
		}
		*message += "\n"
		return true

	default:
		fmt.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤: %T\n", expenses)
		return false
	}
}

// handleIncomes –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
func handleIncomes(incomes interface{}, message *string) bool {
	fmt.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Ö–æ–¥–æ–≤: %+v\n", incomes)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Ö–æ–¥—ã
	switch incList := incomes.(type) {
	case []interface{}:
		if len(incList) == 0 {
			return false
		}
		*message += "üí∞ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n"
		for i, inc := range incList {
			if i >= 5 {
				break
			}

			// –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ
			var date, source string
			var amount float64

			switch income := inc.(type) {
			case map[string]interface{}:
				// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ map
				if dateVal, ok := income["date"]; ok {
					date = fmt.Sprintf("%v", dateVal)
				} else if dateVal, ok := income["created_at"]; ok {
					date = fmt.Sprintf("%v", dateVal)
				}

				if sourceVal, ok := income["source"]; ok {
					source = fmt.Sprintf("%v", sourceVal)
				}

				if amountVal, ok := income["amount"]; ok {
					switch a := amountVal.(type) {
					case float64:
						amount = a
					case int:
						amount = float64(a)
					case string:
						amount, _ = strconv.ParseFloat(a, 64)
					}
				}
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
			if date != "" {
				if len(date) > 10 {
					date = date[:10]
				}
				*message += fmt.Sprintf("- %s | %s | %.2f —Ä—É–±.\n", date, source, amount)
			} else {
				*message += fmt.Sprintf("- %s | %.2f —Ä—É–±.\n", source, amount)
			}
		}
		*message += "\n"
		return true

	default:
		fmt.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ—Ö–æ–¥–æ–≤: %T\n", incomes)
		return false
	}
}

// HandleCategory –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /category –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
func (h *BotHandlers) HandleCategory(c telebot.Context) error {
	telegramID := c.Sender().ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
	_, err := h.apiClient.GetUserByTelegramID(telegramID)
	if err != nil {
		return c.Send("–í—ã –Ω–µ —Å–≤—è–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link")
	}

	args := c.Args()
	if len(args) == 0 {
		// –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
		categories := []string{
			"–ü—Ä–æ–¥—É–∫—Ç—ã",
			"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
			"–ñ–∏–ª—å—ë",
			"–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ",
			"–ü–æ–∫—É–ø–∫–∏",
			"–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
			"–ó–¥–æ—Ä–æ–≤—å–µ",
			"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
			"–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
			"–î—Ä—É–≥–æ–µ",
		}

		message := "–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.\n–ù–∞–ø—Ä–∏–º–µ—Ä: /category –ü—Ä–æ–¥—É–∫—Ç—ã\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
		for _, category := range categories {
			message += fmt.Sprintf("- %s\n", category)
		}

		return c.Send(message)
	}

	// –ü–æ–ª—É—á–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
	category := args[0]

	// –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	expenses, err := h.apiClient.GetExpensesByCategory(category, telegramID)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: %s", err.Error()))
	}

	if len(expenses) == 0 {
		return c.Send(fmt.Sprintf("–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", category))
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := fmt.Sprintf("–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '%s':\n\n", category)

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∏–º—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–æ 10
	limit := 10
	if len(expenses) < limit {
		limit = len(expenses)
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
	// –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –º–æ–¥–µ–ª—å Expense –∏–º–µ–µ—Ç –ø–æ–ª–µ CreatedAt –∏–ª–∏ Date

	totalAmount := 0.0
	for i := 0; i < limit; i++ {
		date := expenses[i].CreatedAt.Format("2006-01-02")
		message += fmt.Sprintf("- %s | %s | %.2f —Ä—É–±.\n",
			date, expenses[i].Title, expenses[i].Amount)
		totalAmount += expenses[i].Amount
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
	message += fmt.Sprintf("\n–ò—Ç–æ–≥–æ: %.2f —Ä—É–±.", totalAmount)

	// –ï—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º –≤—ã–≤–µ–¥–µ–Ω–æ
	if len(expenses) > limit {
		message += fmt.Sprintf("\n\n–ü–æ–∫–∞–∑–∞–Ω–æ %d –∏–∑ %d —Ä–∞—Å—Ö–æ–¥–æ–≤.", limit, len(expenses))
	}

	return c.Send(message)
}

// HandleBudgetGoals –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /budget
func (h *BotHandlers) HandleBudgetGoals(c telebot.Context) error {
	telegramID := c.Sender().ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
	_, err := h.apiClient.GetUserByTelegramID(telegramID)
	if err != nil {
		return c.Send("–í—ã –Ω–µ —Å–≤—è–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link")
	}

	// –ü–æ–ª—É—á–∞–µ–º –±—é–¥–∂–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏
	goals, err := h.apiClient.GetBudgetGoals(telegramID)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–Ω—ã—Ö —Ü–µ–ª–µ–π: %s", err.Error()))
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–π
	if goals == nil || len(goals) == 0 {
		return c.Send("–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±—é–¥–∂–µ—Ç–Ω—ã—Ö —Ü–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setbudget –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := "–í–∞—à–∏ –±—é–¥–∂–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏:\n\n"

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–ª–∏
	for category, data := range goals {
		goalData := data.(map[string]interface{})
		amount := goalData["amount"].(float64)
		spent := goalData["spent"].(float64)
		remaining := amount - spent
		percentage := (spent / amount) * 100

		// –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
		var emoji string
		if percentage >= 90 {
			emoji = "üî¥" // –∫—Ä–∞—Å–Ω—ã–π - –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞
		} else if percentage >= 70 {
			emoji = "üü†" // –æ—Ä–∞–Ω–∂–µ–≤—ã–π - –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –ª–∏–º–∏—Ç—É
		} else {
			emoji = "üü¢" // –∑–µ–ª–µ–Ω—ã–π - –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –±—é–¥–∂–µ—Ç–∞
		}

		message += fmt.Sprintf("%s %s:\n", emoji, category)
		message += fmt.Sprintf("   –ë—é–¥–∂–µ—Ç: %.2f —Ä—É–±.\n", amount)
		message += fmt.Sprintf("   –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: %.2f —Ä—É–±. (%.1f%%)\n", spent, percentage)
		message += fmt.Sprintf("   –û—Å—Ç–∞–ª–æ—Å—å: %.2f —Ä—É–±.\n\n", remaining)
	}

	return c.Send(message)
}

// HandleSetBudgetGoal –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /setbudget
func (h *BotHandlers) HandleSetBudgetGoal(c telebot.Context) error {
	telegramID := c.Sender().ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
	_, err := h.apiClient.GetUserByTelegramID(telegramID)
	if err != nil {
		return c.Send("–í—ã –Ω–µ —Å–≤—è–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link")
	}

	args := c.Args()
	if len(args) != 2 {
		// –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –≤—ã–≤–æ–¥–∏–º –ø–æ–¥—Å–∫–∞–∑–∫—É
		categories := []string{
			"–ü—Ä–æ–¥—É–∫—Ç—ã",
			"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
			"–ñ–∏–ª—å—ë",
			"–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ",
			"–ü–æ–∫—É–ø–∫–∏",
			"–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
			"–ó–¥–æ—Ä–æ–≤—å–µ",
			"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
			"–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
			"–î—Ä—É–≥–æ–µ",
		}

		message := "–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å—É–º–º—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–Ω–æ–π —Ü–µ–ª–∏.\n–ù–∞–ø—Ä–∏–º–µ—Ä: /setbudget –ü—Ä–æ–¥—É–∫—Ç—ã 10000\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
		for _, category := range categories {
			message += fmt.Sprintf("- %s\n", category)
		}

		return c.Send(message)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å—É–º–º—É
	category := args[0]
	amountStr := args[1]

	// –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
	amount, err := strconv.ParseFloat(amountStr, 64)
	if err != nil {
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10000")
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—é–¥–∂–µ—Ç–Ω—É—é —Ü–µ–ª—å
	err = h.apiClient.SetBudgetGoal(category, amount, telegramID)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±—é–¥–∂–µ—Ç–Ω–æ–π —Ü–µ–ª–∏: %s", err.Error()))
	}

	return c.Send(fmt.Sprintf("–ë—é–¥–∂–µ—Ç–Ω–∞—è —Ü–µ–ª—å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '%s' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: %.2f —Ä—É–±.", category, amount))
}

// HandleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (h *BotHandlers) HandleMessage(c telebot.Context) error {
	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if c.Message().Text[0] == '/' {
		return nil
	}

	telegramID := c.Sender().ID

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
	user, err := h.apiClient.GetUserByTelegramID(telegramID)
	if err != nil {
		return c.Send("–í—ã –Ω–µ —Å–≤—è–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link")
	}

	// –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ç—Ä–∞—Ç—É –∏–ª–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ
	// –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —ç–≤—Ä–∏—Å—Ç–∏–∫—É: –µ—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ - –∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–∞—Ç—ã,
	// —Ç–æ —ç—Ç–æ —Ç—Ä–∞—Ç–∞, –∏–Ω–∞—á–µ - –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ
	firstWord := getFirstWord(c.Message().Text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π —Ç—Ä–∞—Ç—ã
	switch strings.ToLower(firstWord) {
	case "–ø—Ä–æ–¥—É–∫—Ç—ã", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–∂–∏–ª—å—ë", "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ", "–ø–æ–∫—É–ø–∫–∏", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–∑–¥–æ—Ä–æ–≤—å–µ", "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–¥—Ä—É–≥–æ–µ":
		// –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ç—Ä–∞—Ç—É
		return h.handleExpense(c, user)
	case "–∑–∞—Ä–ø–ª–∞—Ç–∞", "—Ñ—Ä–∏–ª–∞–Ω—Å", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–ø–æ–¥–∞—Ä–æ–∫", "–∞—Ä–µ–Ω–¥–∞":
		// –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ
		return h.handleIncome(c, user)
	default:
		// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /expense –∏–ª–∏ /income –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç –∏–ª–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π.")
	}
}

// handleExpense –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã
func (h *BotHandlers) handleExpense(c telebot.Context, user *models.User) error {
	telegramID := c.Sender().ID

	// –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	expenseRequest, err := parsers.ParseExpense(c.Message().Text)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç—Ä–∞—Ç—ã: %s", err.Error()))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Ç—É —á–µ—Ä–µ–∑ API
	expense, err := h.apiClient.CreateExpense(user.ID, expenseRequest, telegramID)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞—Ç—ã: %s", err.Error()))
	}

	return c.Send(fmt.Sprintf("–¢—Ä–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n- –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n- –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: %s\n- –°—É–º–º–∞: %.2f —Ä—É–±.", expense.Category, expense.Title, expense.Amount))
}

// handleIncome –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
func (h *BotHandlers) handleIncome(c telebot.Context, user *models.User) error {
	telegramID := c.Sender().ID

	// –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	incomeRequest, err := parsers.ParseIncome(c.Message().Text)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: %s", err.Error()))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
	income, err := h.apiClient.CreateIncome(user.ID, incomeRequest, telegramID)
	if err != nil {
		return c.Send(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: %s", err.Error()))
	}

	return c.Send(fmt.Sprintf("–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n- –ò—Å—Ç–æ—á–Ω–∏–∫: %s\n- –°—É–º–º–∞: %.2f —Ä—É–±.", income.Source, income.Amount))
}

// getFirstWord –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
func getFirstWord(text string) string {
	words := strings.Fields(text)
	if len(words) > 0 {
		return words[0]
	}
	return ""
}
